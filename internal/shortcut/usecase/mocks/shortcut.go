// Code generated by MockGen. DO NOT EDIT.
// Source: smallurl/internal/shortcut/usecase (interfaces: Shortcut)
//
// Generated by this command:
//
//	mockgen -destination=mocks/shortcut.go -package=mu . Shortcut
//

// Package mu is a generated GoMock package.
package mu

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockShortcut is a mock of Shortcut interface.
type MockShortcut struct {
	ctrl     *gomock.Controller
	recorder *MockShortcutMockRecorder
}

// MockShortcutMockRecorder is the mock recorder for MockShortcut.
type MockShortcutMockRecorder struct {
	mock *MockShortcut
}

// NewMockShortcut creates a new mock instance.
func NewMockShortcut(ctrl *gomock.Controller) *MockShortcut {
	mock := &MockShortcut{ctrl: ctrl}
	mock.recorder = &MockShortcutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortcut) EXPECT() *MockShortcutMockRecorder {
	return m.recorder
}

// GetShort mocks base method.
func (m *MockShortcut) GetShort(arg0 string, arg1 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShort", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetShort indicates an expected call of GetShort.
func (mr *MockShortcutMockRecorder) GetShort(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShort", reflect.TypeOf((*MockShortcut)(nil).GetShort), arg0, arg1)
}
